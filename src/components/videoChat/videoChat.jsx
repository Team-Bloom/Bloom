// //app/VideoComponent.js
// import React, { Component } from 'react';
// import Video from 'twilio-video';
// import axios from 'axios';

// export default class VideoComponent extends Component {
//   constructor(props) {
//     super();
//     this.state = {
//       identity: null /* Will hold the fake name assigned to the client. The name is generated by faker on the server */,
//       roomName: '' /* Will store the room name */,
//       roomNameErr: false /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */,
//       previewTracks: null,
//       localMediaAvailable: false /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */,
//       hasJoinedRoom: false,
//       activeRoom: null, // Track the current active room
//     };
//     this.joinRoom = this.joinRoom.bind(this);
//     this.handleRoomNameChange = this.handleRoomNameChange.bind(this);
//     this.leaveRoom = this.leaveRoom.bind(this);
//     this.detachTracks = this.detachTracks.bind(this);
//     this.detachParticipantTracks = this.detachParticipantTracks.bind(this);
//   }

//   componentDidMount() {
//     axios
//       .get('http://localhost:5000/bloom-895e7/us-central1/token')
//       .then(results => {
//         /*
// Make an API call to get the token and identity(fake name) and  update the corresponding state variables.
//     */
//         const { identity, token } = results.data;
//         this.setState({ identity, token });
//       });
//   }

//   handleRoomNameChange(e) {
//     /* Fetch room name from text field and update state */
//     let roomName = e.target.value;
//     this.setState({ roomName });
//   }

//   joinRoom() {
//     /*
// Show an error message on room name text field if user tries         joining a room without providing a room name. This is enabled by setting `roomNameErr` to true
//   */
//     if (!this.state.roomName.trim()) {
//       this.setState({ roomNameErr: true });
//       return;
//     }

//     console.log("Joining room '" + this.state.roomName + "'...");
//     let connectOptions = {
//       name: this.state.roomName,
//     };

//     if (this.state.previewTracks) {
//       connectOptions.tracks = this.state.previewTracks;
//     }

//     /*
// Connect to a room by providing the token and connection    options that include the room name and tracks. We also show an alert if an error occurs while connecting to the room.
// */

//     Video.connect(
//       this.state.token,
//       connectOptions
//     ).then(this.roomJoined, error => {
//       alert('Could not connect to Twilio: ' + error.message);
//     });
//   }
//   // Attach the Tracks to the DOM.
//   attachTracks(tracks, container) {
//     tracks.forEach(track => {
//       container.appendChild(track.attach());
//     });
//   }

//   // Attach the Participant's Tracks to the DOM.
//   attachParticipantTracks(participant, container) {
//     var tracks = Array.from(participant.tracks.values());
//     this.attachTracks(tracks, container);
//   }

//   roomJoined(room) {
//     // … existing code
//     if (!previewContainer.querySelector('video')) {
//       this.attachParticipantTracks(room.localParticipant, previewContainer);
//     }

//     // Attach the Tracks of the room's participants.
//     room.participants.forEach(participant => {
//       console.log("Already in Room: '" + participant.identity + "'");
//       var previewContainer = this.refs.remoteMedia;
//       this.attachParticipantTracks(participant, previewContainer);
//     });

//     // Participant joining room
//     room.on('participantConnected', participant => {
//       console.log("Joining: '" + participant.identity + "'");
//     });

//     // Attach participant’s tracks to DOM when they add a track
//     room.on('trackAdded', (track, participant) => {
//       console.log(participant.identity + ' added track: ' + track.kind);
//       var previewContainer = this.refs.remoteMedia;
//       this.attachTracks([track], previewContainer);
//     });

//     // Detach participant’s track from DOM when they remove a track.
//     room.on('trackRemoved', (track, participant) => {
//       this.log(participant.identity + ' removed track: ' + track.kind);
//       this.detachTracks([track]);
//     });

//     // Detach all participant’s track when they leave a room.
//     room.on('participantDisconnected', participant => {
//       console.log("Participant '" + participant.identity + "' left the room");
//       this.detachParticipantTracks(participant);
//     });

//     // Once the local participant leaves the room, detach the Tracks
//     // of all other participants, including that of the LocalParticipant.
//     room.on('disconnected', () => {
//       if (this.state.previewTracks) {
//         this.state.previewTracks.forEach(track => {
//           track.stop();
//         });
//       }
//       this.detachParticipantTracks(room.localParticipant);
//       room.participants.forEach(this.detachParticipantTracks);
//       this.setState({
//         hasJoinedRoom: false,
//         localMediaAvailable: false,
//         activeRoom: null,
//       });
//     });
//   }

//   leaveRoom() {
//     this.state.activeRoom.disconnect();
//     this.setState({ hasJoinedRoom: false, localMediaAvailable: false });
//   }

//   detachTracks(tracks) {
//     tracks.forEach(track => {
//       track.detach().forEach(detachedElement => {
//         detachedElement.remove();
//       });
//     });
//   }

//   detachParticipantTracks(participant) {
//     var tracks = Array.from(participant.tracks.values());
//     this.detachTracks(tracks);
//   }

//   render() {
//     /*
//    Controls showing of the local track
//    Only show video track after user has joined a room else show nothing
//   */
//     let showLocalTrack = this.state.localMediaAvailable ? (
//       <div className="flex-item">
//         <div ref="localMedia" />{' '}
//       </div>
//     ) : (
//       ''
//     );
//     /*
//    Controls showing of ‘Join Room’ or ‘Leave Room’ button.
//    Hide 'Join Room' button if user has already joined a room otherwise
//    show `Leave Room` button.
//   */
//     let joinOrLeaveRoomButton = this.state.hasJoinedRoom ? (
//       <RaisedButton
//         label="Leave Room"
//         secondary={true}
//         onClick={() => alert('Leave Room')}
//       />
//     ) : (
//       <RaisedButton label="Join Room" primary={true} onClick={this.joinRoom} />
//     );
//     return (
//       <Card>
//         <CardText>
//           <div className="flex-container">
//             {showLocalTrack} {/* Show local track if available */}
//             <div className="flex-item">
//               {/*
// The following text field is used to enter a room name. It calls  `handleRoomNameChange` method when the text changes which sets the `roomName` variable initialized in the state.
//     */}
//               <TextField
//                 hintText="Room Name"
//                 onChange={this.handleRoomNameChange}
//                 errorText={
//                   this.state.roomNameErr ? 'Room Name is required' : undefined
//                 }
//               />
//               <br />
//               {joinOrLeaveRoomButton}{' '}
//               {/* Show either ‘Leave Room’ or ‘Join Room’ button */}
//             </div>
//             {/*
// The following div element shows all remote media (other                             participant’s tracks)
//     */}
//             <div className="flex-item" ref="remoteMedia" id="remote-media" />
//           </div>
//         </CardText>
//       </Card>
//     );
//   }
// }

// import React, { Component } from 'react';
// import axios from 'axios';
// import RaisedButton from 'material-ui/RaisedButton';
// import Video from 'twilio-video';
// // Initialize Cloud Functions through Firebase
// // import { functions } from '../../index';

// export default class VideoComponent extends Component {
//   constructor(props) {
//       super(props);
//       this.activeRoom = null;
//       this.previewTracks = null;
//       this.identity = null;
//       this.roomName = null;
//       this.roomJoined = this.roomJoined.bind(this);
//   }

//   componentDidMount() {
//     window.addEventListener('beforeunload', this.leaveRoomIfJoined);
//     this.refs.buttonPreview.onclick = () => {
//       var localTracksPromise = this.previewTracks
//         ? Promise.resolve(this.previewTracks)
//         : Video.createLocalTracks();

//       localTracksPromise.then(
//         tracks => {
//           window.previewTracks = this.previewTracks = tracks;
//           var previewContainer = document.getElementById('local-media');
//           if (!previewContainer.querySelector('video')) {
//             this.attachTracks(tracks, previewContainer);
//           }
//         }
//         // (error)=> {
//         //     this.log("Unable to access Camera and Microphon");
//         // }
//       );
//     };

//     // var token = functions.httpsCallable('token');

//     axios.get('http://localhost:5000/bloom-895e7/us-central1/token').then(results => {
//       this.identity = results.data.identity;
//       this.refs.roomControls.style.display = 'block';
//       console.log('line 43 in results')
//       // Bind button to join Room.
//       this.refs.buttonJoin.onclick = () => {
//         this.roomName = this.refs.roomName.value;
//         if (!this.roomName) {
//           alert('Please enter a room name.');
//           return;
//         }

//         console.log("Joining room '" + this.roomName + "'...");
//         var connectOptions = {
//           name: this.roomName,
//           logLevel: 'debug',
//         };

//         if (this.previewTracks) {
//           connectOptions.tracks = this.previewTracks;
//         }

//         // Join the Room with the token from the server and the
//         // LocalParticipant's Tracks.
//         Video.connect(
//           results.data.token,
//           connectOptions
//         ).then(this.roomJoined, error => {
//           console.log('Could not connect to Twilio: ' + error.message);
//         });
//       };

//       // Bind button to leave Room.
//       this.refs.buttonLeave.onclick = () => {
//         console.log('Leaving room...');
//         this.activeRoom.disconnect();
//       };

//     });
//   }

//   attachTracks(tracks, container) {
//     tracks.forEach(track => {
//       container.appendChild(track.attach());
//     });
//   }

//   attachParticipantTracks(participant, container) {
//     var tracks = Array.from(participant.tracks.values());
//     this.attachTracks(tracks, container);
//   }

//   detachTracks(tracks) {
//     tracks.forEach(track => {
//       track.detach().forEach(detachedElement => {
//         detachedElement.remove();
//       });
//     });
//   }

//   detachParticipantTracks(participant) {
//     var tracks = Array.from(participant.tracks.values());
//     this.detachTracks(tracks);
//   }

//   log(message) {
//     var logDiv = this.refs.log;
//     logDiv.innerHTML += '<p>&gt;&nbsp;' + message + '</p>';
//     logDiv.scrollTop = logDiv.scrollHeight;
//   }

//   roomJoined(room) {
//     this.activeRoom = room;
//     window.room = room.name;

//     console.log("line 116 !!!!! Joined as '" + this.identity + "'");
//     this.refs.buttonJoin.style.display = 'none';
//     this.refs.buttonLeave.style.display = 'inline';

//     // Attach LocalParticipant's Tracks, if not already attached.
//     var previewContainer = this.refs.localMedia;
//     if (!previewContainer.querySelector('video')) {
//       this.attachParticipantTracks(room.localParticipant, previewContainer);
//     }

//     // Attach the Tracks of the Room's Participants.
//     room.participants.forEach(participant => {
//       console.log("Already in Room: '" + participant.identity + "'");
//       var previewContainer = document.getElementById('remote-media');
//       this.attachParticipantTracks(participant, previewContainer);
//     });

//     // When a Participant joins the Room, log the event.
//     room.on('participantConnected', participant => {
//       console.log("Joining: '" + participant.identity + "'");
//     });

//     // When a Participant adds a Track, attach it to the DOM.
//     room.on('trackAdded', (track, participant) => {
//       console.log(participant.identity + ' added track: ' + track.kind);
//       var previewContainer = document.getElementById('remote-media');
//       this.attachTracks([track], previewContainer);
//     });

//     // When a Participant removes a Track, detach it from the DOM.
//     room.on('trackRemoved', (track, participant) => {
//       console.log(participant.identity + ' removed track: ' + track.kind);
//       this.detachTracks([track]);
//     });

//     // When a Participant leaves the Room, detach its Tracks.
//     room.on('participantDisconnected', participant => {
//       console.log("Participant '" + participant.identity + "' left the room");
//       this.detachParticipantTracks(participant);
//     });

//     // Once the LocalParticipant leaves the room, detach the Tracks
//     // of all Participants, including that of the LocalParticipant.
//     room.on('disconnected', () => {
//       console.log('Left');
//       if (this.previewTracks) {
//         this.previewTracks.forEach(track => {
//           track.stop();
//         });
//       }
//       this.detachParticipantTracks(room.localParticipant);
//       room.participants.forEach(this.detachParticipantTracks);
//       this.activeRoom = null;
//       this.refs.buttonJoin.style.display = 'inline';
//       document.getElementById('button-leave').style.display = 'none';
//     });
//   }

//   leaveRoomIfJoined() {
//     if (this.activeRoom) {
//       this.activeRoom.disconnect();
//     }
//   }

//   render() {
//     console.log('line 175 videoChat', this.props);
//     return (
//       <div>
//         <div id="remote-media" />
//         <div id="controls">
//           <div id="preview">
//             <p className="instructions">Hello</p>
//             <div ref="localMedia" id="local-media" />
//             <button ref="buttonPreview" id="button-preview">
//               Preview My Camera
//             </button>
//           </div>
//           <div ref="roomControls">
//             <p className="instructions">Room Name:</p>
//             <input
//               ref="roomName"
//               id="room-name"
//               type="text"
//               placeholder="Enter a room name"
//             />
//             <button ref="buttonJoin" id="button-join">
//               Join Room
//             </button>
//             <button ref="buttonLeave" id="button-leave">
//               Leave Room
//             </button>
//           </div>
//           <div ref="log" id="log" />
//         </div>
//       </div>
//     );
//   }
// }

import React, {Component} from 'react'
import Video from 'twilio-video'
import axios from 'axios'
import Button from '@material-ui/core/Button'
import TextField from '@material-ui/core/TextField'
import Card from '@material-ui/core/Card'
// import CardHeader from '@material-ui/core/CardHeader'
import CardText from '@material-ui/core/CardContent'
//Componenet needs reservationId passed to it as a prop!!!!
export default class VideoComponent extends Component {
  constructor(props) {
    super()
    this.state = {
      identity: null,
      roomName: '',
      roomNameErr: false, // Track error for room name TextField
      previewTracks: null,
      localMediaAvailable: false,
      hasJoinedRoom: false,
      activeRoom: '' // Track the current active room
    }
    this.joinRoom = this.joinRoom.bind(this)
    this.handleRoomNameChange = this.handleRoomNameChange.bind(this)
    this.roomJoined = this.roomJoined.bind(this)
    this.leaveRoom = this.leaveRoom.bind(this)
    this.detachTracks = this.detachTracks.bind(this)
    this.detachParticipantTracks = this.detachParticipantTracks.bind(this)
  }
  handleRoomNameChange(e) {
    let roomName = e.target.value
    this.setState({roomName})
  }
  joinRoom() {
    if (!this.state.roomName.trim()) {
      this.setState({roomNameErr: true})
      return
    }
    console.log("Joining room '" + this.state.roomName + "'...")
    let connectOptions = {
      name: this.state.roomName
    }
    if (this.state.previewTracks) {
      connectOptions.tracks = this.state.previewTracks
    }
    // Join the Room with the token from the server and the
    // LocalParticipant's Tracks.
    Video.connect(this.state.token, connectOptions).then(
      this.roomJoined,
      error => {
        alert('Could not connect to Twilio: ' + error.message)
      }
    )
  }
  attachTracks(tracks, container) {
    tracks.forEach(track => {
      container.appendChild(track.attach())
    })
  }
  // Attaches a track to a specified DOM container
  attachParticipantTracks(participant, container) {
    var tracks = Array.from(participant.tracks.values())
    this.attachTracks(tracks, container)
  }
  detachTracks(tracks) {
    tracks.forEach(track => {
      track.detach().forEach(detachedElement => {
        detachedElement.remove()
      })
    })
  }
  detachParticipantTracks(participant) {
    var tracks = Array.from(participant.tracks.values())
    this.detachTracks(tracks)
  }
  roomJoined(room) {
    // Called when a participant joins a room
    console.log("Joined as '" + this.state.identity + "'")
    this.setState({
      activeRoom: room,
      localMediaAvailable: true,
      hasJoinedRoom: true
    })
    // Attach LocalParticipant's Tracks, if not already attached.
    var previewContainer = this.refs.localMedia
    if (!previewContainer.querySelector('video')) {
      this.attachParticipantTracks(room.localParticipant, previewContainer)
    }
    // Attach the Tracks of the Room's Participants.
    room.participants.forEach(participant => {
      console.log("Already in Room: '" + participant.identity + "'")
      var previewContainer = this.refs.remoteMedia
      this.attachParticipantTracks(participant, previewContainer)
    })
    // When a Participant joins the Room, log the event.
    room.on('participantConnected', participant => {
      console.log("Joining: '" + participant.identity + "'")
    })
    // When a Participant adds a Track, attach it to the DOM.
    room.on('trackAdded', (track, participant) => {
      console.log(participant.identity + ' added track: ' + track.kind)
      var previewContainer = this.refs.remoteMedia
      this.attachTracks([track], previewContainer)
    })
    // When a Participant removes a Track, detach it from the DOM.
    room.on('trackRemoved', (track, participant) => {
      this.log(participant.identity + ' removed track: ' + track.kind)
      this.detachTracks([track])
    })
    // When a Participant leaves the Room, detach its Tracks.
    room.on('participantDisconnected', participant => {
      console.log("Participant '" + participant.identity + "' left the room")
      this.detachParticipantTracks(participant)
    })
    // Once the LocalParticipant leaves the room, detach the Tracks
    // of all Participants, including that of the LocalParticipant.
    room.on('disconnected', () => {
      if (this.state.previewTracks) {
        this.state.previewTracks.forEach(track => {
          track.stop()
        })
      }
      this.detachParticipantTracks(room.localParticipant)
      room.participants.forEach(this.detachParticipantTracks)
      this.setState({activeRoom: null})
      this.setState({hasJoinedRoom: false, localMediaAvailable: false})
    })
  }
  componentDidMount = async () => {
    await axios.get(`http://localhost:5000/bloom-895e7/us-central1/token`).then(results => {
      const {identity, token} = results.data
      this.setState({identity, token})
    })
    if (this.props.reservationId) {
      this.setState({roomName: 'Test'})
    } else {
      this.setState({roomName: 'Test Default'})
    }
    this.joinRoom()
  }
  leaveRoom() {
    this.state.activeRoom.disconnect()
    this.setState({hasJoinedRoom: false, localMediaAvailable: false})
  }
  render() {
    // Only show video track after user has joined a room
    let showLocalTrack = this.state.localMediaAvailable ? (
      <div className="flex-item">
        <div ref="localMedia" />
      </div>
    ) : (
      ''
    )
    // Hide 'Join Room' button if user has already joined a room.
    let joinOrLeaveRoomButton = this.state.hasJoinedRoom ? (
      <Button color="secondary" onClick={this.leaveRoom}>
        Leave Room
      </Button>
    ) : (
      <Button color="primary" onClick={this.joinRoom}>
        Join Room
      </Button>
    )
    return (
      <Card>
        <CardText>
          <div className="flex justify-around flex-wrap">
            <div className="flex flex-column">
              {showLocalTrack}
              <div>
                <TextField
                  placeholder="Room Name"
                  onChange={this.handleRoomNameChange}
                  error={!!this.state.roomNameErr}
                  value={this.state.roomName}
                />
                <br />
                {joinOrLeaveRoomButton}
              </div>
            </div>
            <div ref="remoteMedia" id="remote-media" />
          </div>
        </CardText>
      </Card>
    )
  }
}
